{
  "contractName": "ContestTeamRegistryMock",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "RegistrationStatusUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "SubmissionStatusUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "teamId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "teamAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "proposalData",
          "type": "bytes32"
        }
      ],
      "name": "TeamProposalUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "teamId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "teamName",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "teamAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "TeamRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "teamId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "teamAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "TeamStatusUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "teamId",
          "type": "uint256"
        }
      ],
      "name": "approveTeam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeRegistration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeSubmission",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRegistrationStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSubmissionStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "teamId",
          "type": "uint256"
        }
      ],
      "name": "getTeam",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "teamAddress",
          "type": "address"
        }
      ],
      "name": "getTeamByAddress",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openRegistration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openSubmission",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "teamName",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "teamAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "proposalData",
          "type": "bytes32"
        }
      ],
      "name": "registerTeam",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "teamId",
          "type": "uint256"
        }
      ],
      "name": "reproveTeam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "teamIds",
          "type": "uint256[]"
        }
      ],
      "name": "reproveTeams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "teams",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "teamAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "proposalData",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "grade",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "teamId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "proposalData",
          "type": "bytes32"
        }
      ],
      "name": "updateProposalData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getApprovedTeamsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"RegistrationStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SubmissionStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"teamId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proposalData\",\"type\":\"bytes32\"}],\"name\":\"TeamProposalUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"teamId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"teamName\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"TeamRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"teamId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"TeamStatusUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"teamId\",\"type\":\"uint256\"}],\"name\":\"approveTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeRegistration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeSubmission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getApprovedTeamsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegistrationStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubmissionStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"teamId\",\"type\":\"uint256\"}],\"name\":\"getTeam\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamAddress\",\"type\":\"address\"}],\"name\":\"getTeamByAddress\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openRegistration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openSubmission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"teamName\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"teamAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"proposalData\",\"type\":\"bytes32\"}],\"name\":\"registerTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"teamId\",\"type\":\"uint256\"}],\"name\":\"reproveTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"teamIds\",\"type\":\"uint256[]\"}],\"name\":\"reproveTeams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"teams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"teamAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"proposalData\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"grade\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"teamId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"proposalData\",\"type\":\"bytes32\"}],\"name\":\"updateProposalData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approveTeam(uint256)\":{\"details\":\"Should be overwritten on inherited contract to add modifier or require statements for access control.\",\"params\":{\"teamId\":\"{uint256} the ids of the teams to be approved\"}},\"closeRegistration()\":{\"details\":\"Should be overwritten on inherited contract to add modifier or require statements for access control.\"},\"closeSubmission()\":{\"details\":\"Should be overwritten on inherited contract to add modifier or require statements for access control.\"},\"getRegistrationStatus()\":{\"returns\":{\"_0\":\"{bool} returns {true} if enabled; otherwise, {false}.\"}},\"getSubmissionStatus()\":{\"returns\":{\"_0\":\"{bool} returns {true} if enabled; otherwise, {false}.\"}},\"getTeam(uint256)\":{\"params\":{\"teamId\":\"{uint256} the team's unique identifier returned on registration\"},\"returns\":{\"_0\":\"{bytes32} team's name\",\"_1\":\"{address} team's address\",\"_2\":\"{bytes32} team's proposal data\",\"_3\":\"{bool} team's status: {true} for approved; {false} for reproved;\",\"_4\":\"{uint256} team's grade\"}},\"getTeamByAddress(address)\":{\"params\":{\"teamAddress\":\"{address} the team's contract address used on registration\"},\"returns\":{\"_0\":\"{bytes32} team's name\",\"_1\":\"{address} team's address\",\"_2\":\"{bytes32} team's proposal data\",\"_3\":\"{bool} team's status: {true} for approved; {false} for reproved;\",\"_4\":\"{uint256} team's grade\"}},\"openRegistration()\":{\"details\":\"Should be overwritten on inherited contract to add modifier or require statements for access control.\"},\"openSubmission()\":{\"details\":\"Should be overwritten on inherited contract to add modifier or require statements for access control.\"},\"registerTeam(bytes32,address,bytes32)\":{\"details\":\"Registration process must be open.\",\"params\":{\"teamName\":\"{bytes32} team's proposal data; could be a hash for a file  on IPFS or for a github link; not required\"}},\"reproveTeam(uint256)\":{\"details\":\"Should be overwritten on inherited contract to add modifier or require statements for access control.\",\"params\":{\"teamId\":\"{uint256} the ids of the teams to be reproved\"}},\"reproveTeams(uint256[])\":{\"details\":\"Should be overwritten on inherited contract to add modifier or require statements for access control.\",\"params\":{\"teamIds\":\"{uint256[]} an array containing the ids of the teams to be reproved\"}},\"updateProposalData(uint256,bytes32)\":{\"params\":{\"proposalData\":\"the updated data for the team's proposal\",\"teamId\":\"team's unique identifier; required\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveTeam(uint256)\":{\"notice\":\"(re)approves a team in participating in the contest\"},\"closeRegistration()\":{\"notice\":\"Closes the registration process\"},\"closeSubmission()\":{\"notice\":\"Closes the proposal submission process\"},\"getRegistrationStatus()\":{\"notice\":\"Gets the registration status\"},\"getSubmissionStatus()\":{\"notice\":\"Gets the submission status\"},\"getTeam(uint256)\":{\"notice\":\"Returns the stored information of a team\"},\"getTeamByAddress(address)\":{\"notice\":\"Returns the stored information of a team, based on a provided address\"},\"openRegistration()\":{\"notice\":\"Opens the registration process\"},\"openSubmission()\":{\"notice\":\"Opens the proposal submission process\"},\"registerTeam(bytes32,address,bytes32)\":{\"notice\":\"Registers a new team in the contest registry.\"},\"reproveTeam(uint256)\":{\"notice\":\"reproves a team from participating in the contest\"},\"reproveTeams(uint256[])\":{\"notice\":\"reprove teams from participating in the contest\"},\"updateProposalData(uint256,bytes32)\":{\"notice\":\"Updates the proposal data for a specific team.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"/media/fodisi/56401C55401C3DE5/dev/Projects/hackapay/contracts/mocks/ContestTeamRegistryMock.sol\":\"ContestTeamRegistryMock\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/media/fodisi/56401C55401C3DE5/dev/Projects/hackapay/contracts/core/ContestTeamRegistry.sol\":{\"keccak256\":\"0xa34a43eda649b6f5f47ef78ad39ba98b57740fe1a8fe666c352c417144a766ad\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://c2058149325eced44944dce8741d1f4868c6fe37940989fe8974ed0ed24d5069\",\"dweb:/ipfs/QmcvTo6aeZpeaPcjH23WAs7VqMyVNvhTCEEqhQ691AwXAp\"]},\"/media/fodisi/56401C55401C3DE5/dev/Projects/hackapay/contracts/mocks/ContestTeamRegistryMock.sol\":{\"keccak256\":\"0x21893b0d0dd6558809b45d9d848697ee3b40c31b229a8154cb7dfb714c9d4c50\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://221388c2f5ec4655f0ee4822b8f6554973ce9c59887520a0b242a32fa0491d75\",\"dweb:/ipfs/QmdDgaYyVXMShNeVT5yRHGKgbScL4jPVi96HKqf1sGxwf4\"]},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7f8d45329fecbf0836ad7543330c3ecd0f8d0ffa42d4016278c3eb2215fdcdfe\",\"dweb:/ipfs/QmXWLT7GcnHtA5NiD6MFi2CV3EWJY4wv5mLNnypqYDrxL3\"]}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "116:216:12:-:0;;;178:38;;;;;;;;;;116:216;;;;;;",
  "deployedSourceMap": "116:216:12:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3411:293:3;;;;;;;;;;;;;;;;-1:-1:-1;3411:293:3;;:::i;:::-;;;;;;;-1:-1:-1;;;;;3411:293:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8420:83;;;;;;;;;;;;;;;;-1:-1:-1;8420:83:3;;:::i;:::-;;8795:98;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8795:98:3;;-1:-1:-1;8795:98:3;-1:-1:-1;8795:98:3;:::i;1152:19::-;;;;;;;;;;;;;;;;-1:-1:-1;1152:19:3;;:::i;:::-;;;;;;;;;;;;;;-1:-1:-1;;;;;1152:19:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4144:332;;;;;;;;;;;;;;;;-1:-1:-1;4144:332:3;-1:-1:-1;;;;;4144:332:3;;:::i;8046:101::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;7815:96;;;:::i;4859:1108::-;;;;;;;;;;;;;;;;-1:-1:-1;4859:1108:3;;;-1:-1:-1;;;;;4859:1108:3;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;6706:102;;;:::i;222:107:12:-;;;:::i;6992:102:3:-;;;:::i;7231:105::-;;;:::i;6178:343::-;;;;;;;;;;;;;;;;-1:-1:-1;6178:343:3;;;;;;;:::i;9164:83::-;;;;;;;;;;;;;;;;-1:-1:-1;9164:83:3;;:::i;7528:96::-;;;:::i;3411:293::-;3517:7;3526;3535;3544:4;3550:7;3492:6;2681:21;2695:6;2681:13;:21::i;:::-;2673:49;;;;;-1:-1:-1;;;2673:49:3;;;;;;;;;;;;-1:-1:-1;;;2673:49:3;;;;;;;;;;;;;;;3573:16:::1;3592:5;3598:6;3592:13;;;;;;;;;::::0;;;::::1;::::0;;;;3573:32:::1;::::0;;::::1;::::0;::::1;::::0;;3592:13:::1;::::0;;;::::1;::::0;;::::1;3573:32:::0;;;;::::1;::::0;::::1;::::0;;;::::1;::::0;;;::::1;::::0;::::1;::::0;-1:-1:-1;;;;;3573:32:3::1;::::0;;;;;;::::1;::::0;::::1;::::0;;;;;;;::::1;::::0;::::1;::::0;::::1;;;;::::0;;;;;;::::1;::::0;;::::1;::::0;;;;;;;;;;;;-1:-1:-1;3573:32:3;;-1:-1:-1;3573:32:3;;-1:-1:-1;3573:32:3;-1:-1:-1;3411:293:3;-1:-1:-1;;;;3411:293:3:o;8420:83::-;8476:20;8489:6;8476:12;:20::i;:::-;8420:83;:::o;8795:98::-;8864:22;8878:7;;8864:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8864:13:3;;-1:-1:-1;;;8864:22:3:i;:::-;8795:98;;:::o;1152:19::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1152:19:3;;-1:-1:-1;;;;;1152:19:3;;;;;;;;;;:::o;4144:332::-;4212:7;;;;;-1:-1:-1;;;;;4272:25:3;;4264:58;;;;;-1:-1:-1;;;4264:58:3;;;;;;;;;;;;-1:-1:-1;;;4264:58:3;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;4351:26:3;;;4332:16;4351:26;;;;;;;;;;;;4332:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4332:45:3;4144:332::o;8046:101::-;8123:17;;;;;;;;8046:101::o;7815:96::-;2562:17;;;;;;;2561:18;2553:49;;;;;-1:-1:-1;;;2553:49:3;;;;;;;;;;;;-1:-1:-1;;;2553:49:3;;;;;;;;;;;;;;;7887:17:::1;:15;:17::i;:::-;7815:96::o:0;4859:1108::-;2212:19;;5003:7;;2212:19;;2204:54;;;;;-1:-1:-1;;;2204:54:3;;;;;;;;;;;;-1:-1:-1;;;2204:54:3;;;;;;;;;;;;;;;5034:8;5043:1:::1;5034:11;;;-1:-1:-1::0;;;;;;5034:16:3::1;5026:54;;;::::0;;-1:-1:-1;;;5026:54:3;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;::::1;::::0;;;;;;;;;;;;;::::1;;-1:-1:-1::0;;;;;5098:25:3;::::1;5090:65;;;::::0;;-1:-1:-1;;;5090:65:3;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;::::1;::::0;;;;;;;;;;;;;::::1;;-1:-1:-1::0;;;;;5173:26:3;;::::1;5223:1;5173:26:::0;;;::::1;::::0;;;;;;:38:::1;;::::0;::::1;:52:::0;5165:88:::1;;;::::0;;-1:-1:-1;;;5165:88:3;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;::::1;::::0;;;;;;;;;;;;;::::1;;5280:5;:12:::0;;5679:58:::1;::::0;;::::1;::::0;::::1;::::0;;;;;::::1;::::0;::::1;::::0;;;-1:-1:-1;;;;;5679:58:3;;::::1;::::0;;;;;;;;;;;;;;;;;;-1:-1:-1;5679:58:3;;;;;;5747:16;;::::1;::::0;;;;;;;;;::::1;::::0;::::1;::::0;;::::1;::::0;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;5747:16:3::1;::::0;;;::::1;;::::0;;;;;;;;;;;;;;-1:-1:-1;;5747:16:3::1;::::0;::::1;;::::0;;;::::1;::::0;;;;;;;;;;;;5802:13;;5280:12;;5679:58;;5280:12;;5802:13;::::1;;;;;;::::0;;;::::1;::::0;;;-1:-1:-1;;;;;5773:26:3;;::::1;::::0;;;;;;;;;;5802:13:::1;::::0;;::::1;::::0;;::::1;5773:42:::0;;;;::::1;::::0;;::::1;::::0;;;::::1;::::0;::::1;::::0;;::::1;::::0;;;::::1;::::0;;-1:-1:-1;;;;;;5773:42:3::1;::::0;;;::::1;;::::0;;;::::1;::::0;;::::1;::::0;;;::::1;::::0;::::1;::::0;;::::1;::::0;;;::::1;::::0;;::::1;::::0;;::::1;;;-1:-1:-1::0;;5773:42:3;;::::1;::::0;;;::::1;::::0;;::::1;::::0;;::::1;::::0;;;;::::1;::::0;5846:18;;:25:::1;::::0;:22:::1;:25::i;:::-;5825:18;:46:::0;5886:51:::1;::::0;;;;;5932:4:::1;5886:51;::::0;::::1;::::0;;;-1:-1:-1;;;;;5886:51:3;::::1;::::0;5901:6;;5886:51:::1;::::0;;;;;;;;;::::1;-1:-1:-1::0;5954:6:3;4859:1108;-1:-1:-1;;;;4859:1108:3:o;6706:102::-;2212:19;;;;2204:54;;;;;-1:-1:-1;;;2204:54:3;;;;;;;;;;;;-1:-1:-1;;;2204:54:3;;;;;;;;;;;;;;;6781:20:::1;:18;:20::i;222:107:12:-:0;304:18;;222:107;:::o;6992:102:3:-;2333:19;;;;2332:20;2324:53;;;;;-1:-1:-1;;;2324:53:3;;;;;;;;;;;;-1:-1:-1;;;2324:53:3;;;;;;;;;;;;;;;7068:19:::1;:17;:19::i;7231:105::-:0;7310:19;;;;7231:105;:::o;6178:343::-;6281:6;2681:21;2695:6;2681:13;:21::i;:::-;2673:49;;;;;-1:-1:-1;;;2673:49:3;;;;;;;;;;;;-1:-1:-1;;;2673:49:3;;;;;;;;;;;;;;;6312:6:::1;2804:22;2819:6;2804:14;:22::i;:::-;2796:55;;;::::0;;-1:-1:-1;;;2796:55:3;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;-1:-1:-1;;;2796:55:3;;;;;;;;;;;;;::::1;;2447:17:::2;::::0;::::2;::::0;::::2;;;2439:50;;;::::0;;-1:-1:-1;;;2439:50:3;;::::2;;::::0;::::2;::::0;::::2;::::0;;;;-1:-1:-1;;;2439:50:3;;;;;;;;;;;;;::::2;;6359:17:::3;6379:5;6385:6;6379:13;;;;;;;;;::::0;;;::::3;::::0;;;;6402:17:::3;6379:13;::::0;;::::3;;6402:17:::0;;::::3;:32:::0;;;6478:16:::3;::::0;::::3;::::0;6469:7;;6449:65:::3;::::0;;;;;;;6379:13;;-1:-1:-1;;;;;;6478:16:3;;::::3;::::0;6469:7;;6449:65:::3;::::0;;;;;;;;::::3;2499:1;2732::::1;6178:343:::0;;;:::o;9164:83::-;9220:20;9233:6;9220:12;:20::i;7528:96::-;2447:17;;;;;;;2439:50;;;;;-1:-1:-1;;;2439:50:3;;;;;;;;;;;;-1:-1:-1;;;2439:50:3;;;;;;;;;;;;;;;7599:18:::1;:16;:18::i;10872:115::-:0;10967:5;:12;10958:21;;10872:115;;;;:::o;9977:300::-;10036:6;2681:21;2695:6;2681:13;:21::i;:::-;2673:49;;;;;-1:-1:-1;;;2673:49:3;;;;;;;;;;;;-1:-1:-1;;;2673:49:3;;;;;;;;;;;;;;;10059:6:::1;2934:22;2949:6;2934:14;:22::i;:::-;2933:23;2925:57;;;::::0;;-1:-1:-1;;;2925:57:3;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;-1:-1:-1;;;2925:57:3;;;;;;;;;;;;;::::1;;10077:17:::2;10097:5;10103:6;10097:13;;;;;;;;;::::0;;;::::2;::::0;;;10120::::2;10097;::::0;;::::2;;10120::::0;;::::2;:20:::0;;-1:-1:-1;;10120:20:3::2;10136:4;10120:20:::0;;::::2;::::0;;;10171:18:::2;::::0;10097:13;;-1:-1:-1;10171:25:3::2;::::0;:18;:22:::2;:25::i;:::-;10150:18;:46:::0;;;10238:16;::::2;::::0;10229:7;;10256:13:::2;::::0;::::2;::::0;10211:59:::2;::::0;;10256:13:::2;::::0;;::::2;10211:59;;::::0;;;-1:-1:-1;;;;;10238:16:3;;::::2;::::0;10211:59:::2;::::0;;;;::::2;::::0;;::::2;2992:1;2732::::1;9977:300:::0;;:::o;10319:168::-;10392:9;10387:94;10411:7;:14;10407:1;:18;10387:94;;;10446:24;10459:7;10467:1;10459:10;;;;;;;;;;;;;;10446:12;:24::i;:::-;10427:3;;10387:94;;9801:134;9847:17;:24;;-1:-1:-1;;9847:24:3;;;;;;;;;9886:42;;;9910:17;;;;9847:24;9910:17;9886:42;;;;;;;;;;;;;;;9801:134::o;882:176:24:-;940:7;971:5;;;994:6;;;;986:46;;;;;-1:-1:-1;;;986:46:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;1050:1;882:176;-1:-1:-1;;;882:176:24:o;9289:144:3:-;9338:19;:27;;-1:-1:-1;;9338:27:3;;;9380:46;;;9360:5;9380:46;;;;;;;;;;;;;9289:144::o;9475:142::-;9523:19;:26;;-1:-1:-1;;9523:26:3;9545:4;9523:26;;;;;9564:46;;;9523:26;9590:19;;;;9564:46;;;;;;;;;;;;;;9475:142::o;11029:223::-;11092:4;11113:21;11127:6;11113:13;:21::i;:::-;11108:65;;-1:-1:-1;11157:5:3;11150:12;;11108:65;11183:16;11202:5;11208:6;11202:13;;;;;;;;;;;;;;;;;11183:32;;;;;;;;11202:13;;;;;;;11183:32;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;11183:32:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;11029:223:3;;;:::o;10529:301::-;10588:6;2681:21;2695:6;2681:13;:21::i;:::-;2673:49;;;;;-1:-1:-1;;;2673:49:3;;;;;;;;;;;;-1:-1:-1;;;2673:49:3;;;;;;;;;;;;;;;10611:6:::1;2804:22;2819:6;2804:14;:22::i;:::-;2796:55;;;::::0;;-1:-1:-1;;;2796:55:3;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;-1:-1:-1;;;2796:55:3;;;;;;;;;;;;;::::1;;10629:17:::2;10649:5;10655:6;10649:13;;;;;;;;;::::0;;;::::2;::::0;;;::::2;::::0;;::::2;;10672;::::0;::::2;:21:::0;;-1:-1:-1;;10672:21:3::2;::::0;;10724:18:::2;::::0;10649:13;;-1:-1:-1;10724:25:3::2;::::0;-1:-1:-1;10724:22:3::2;:25::i;9623:136::-:0;9670:17;:25;;-1:-1:-1;;9670:25:3;;;;;9710:42;;;9670:25;9734:17;;;9670:25;9734:17;9710:42;;;;;;;;;;;;;;9623:136::o;1329:134:24:-;1387:7;1413:43;1417:1;1420;1413:43;;;;;;;;;;;;;;;;;1840:7;1875:12;1867:6;;;;1859:29;;;;-1:-1:-1;;;1859:29:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1910:5:24;;;1754:187::o",
  "source": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.7.0 <0.8.0;\n\nimport \"../core/ContestTeamRegistry.sol\";\n\ncontract ContestTeamRegistryMock is ContestTeamRegistry {\n    constructor() ContestTeamRegistry() {}\n\n    function getApprovedTeamsCount() external view returns (uint256) {\n        return approvedTeamsCount;\n    }\n\n}\n",
  "sourcePath": "/media/fodisi/56401C55401C3DE5/dev/Projects/hackapay/contracts/mocks/ContestTeamRegistryMock.sol",
  "ast": {
    "absolutePath": "/media/fodisi/56401C55401C3DE5/dev/Projects/hackapay/contracts/mocks/ContestTeamRegistryMock.sol",
    "exportedSymbols": {
      "ContestTeamRegistry": [1772],
      "ContestTeamRegistryMock": [2767],
      "SafeMath": [3814]
    },
    "id": 2768,
    "license": "UNLICENSED",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 2749,
        "literals": ["solidity", ">=", "0.7", ".0", "<", "0.8", ".0"],
        "nodeType": "PragmaDirective",
        "src": "40:31:12"
      },
      {
        "absolutePath": "/media/fodisi/56401C55401C3DE5/dev/Projects/hackapay/contracts/core/ContestTeamRegistry.sol",
        "file": "../core/ContestTeamRegistry.sol",
        "id": 2750,
        "nodeType": "ImportDirective",
        "scope": 2768,
        "sourceUnit": 1773,
        "src": "73:41:12",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 2751,
              "name": "ContestTeamRegistry",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1772,
              "src": "152:19:12",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ContestTeamRegistry_$1772",
                "typeString": "contract ContestTeamRegistry"
              }
            },
            "id": 2752,
            "nodeType": "InheritanceSpecifier",
            "src": "152:19:12"
          }
        ],
        "contractDependencies": [1772],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 2767,
        "linearizedBaseContracts": [2767, 1772],
        "name": "ContestTeamRegistryMock",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 2757,
              "nodeType": "Block",
              "src": "214:2:12",
              "statements": []
            },
            "id": 2758,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [],
                "id": 2755,
                "modifierName": {
                  "id": 2754,
                  "name": "ContestTeamRegistry",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1772,
                  "src": "192:19:12",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ContestTeamRegistry_$1772_$",
                    "typeString": "type(contract ContestTeamRegistry)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "192:21:12"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2753,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "189:2:12"
            },
            "returnParameters": {
              "id": 2756,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "214:0:12"
            },
            "scope": 2767,
            "src": "178:38:12",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 2765,
              "nodeType": "Block",
              "src": "287:42:12",
              "statements": [
                {
                  "expression": {
                    "id": 2763,
                    "name": "approvedTeamsCount",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1143,
                    "src": "304:18:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 2762,
                  "id": 2764,
                  "nodeType": "Return",
                  "src": "297:25:12"
                }
              ]
            },
            "functionSelector": "b103b43a",
            "id": 2766,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getApprovedTeamsCount",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2759,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "252:2:12"
            },
            "returnParameters": {
              "id": 2762,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2761,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 2766,
                  "src": "278:7:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2760,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "278:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "277:9:12"
            },
            "scope": 2767,
            "src": "222:107:12",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 2768,
        "src": "116:216:12"
      }
    ],
    "src": "40:293:12"
  },
  "legacyAST": {
    "absolutePath": "/media/fodisi/56401C55401C3DE5/dev/Projects/hackapay/contracts/mocks/ContestTeamRegistryMock.sol",
    "exportedSymbols": {
      "ContestTeamRegistry": [1772],
      "ContestTeamRegistryMock": [2767],
      "SafeMath": [3814]
    },
    "id": 2768,
    "license": "UNLICENSED",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 2749,
        "literals": ["solidity", ">=", "0.7", ".0", "<", "0.8", ".0"],
        "nodeType": "PragmaDirective",
        "src": "40:31:12"
      },
      {
        "absolutePath": "/media/fodisi/56401C55401C3DE5/dev/Projects/hackapay/contracts/core/ContestTeamRegistry.sol",
        "file": "../core/ContestTeamRegistry.sol",
        "id": 2750,
        "nodeType": "ImportDirective",
        "scope": 2768,
        "sourceUnit": 1773,
        "src": "73:41:12",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 2751,
              "name": "ContestTeamRegistry",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1772,
              "src": "152:19:12",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ContestTeamRegistry_$1772",
                "typeString": "contract ContestTeamRegistry"
              }
            },
            "id": 2752,
            "nodeType": "InheritanceSpecifier",
            "src": "152:19:12"
          }
        ],
        "contractDependencies": [1772],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 2767,
        "linearizedBaseContracts": [2767, 1772],
        "name": "ContestTeamRegistryMock",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 2757,
              "nodeType": "Block",
              "src": "214:2:12",
              "statements": []
            },
            "id": 2758,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [],
                "id": 2755,
                "modifierName": {
                  "id": 2754,
                  "name": "ContestTeamRegistry",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1772,
                  "src": "192:19:12",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ContestTeamRegistry_$1772_$",
                    "typeString": "type(contract ContestTeamRegistry)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "192:21:12"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2753,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "189:2:12"
            },
            "returnParameters": {
              "id": 2756,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "214:0:12"
            },
            "scope": 2767,
            "src": "178:38:12",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 2765,
              "nodeType": "Block",
              "src": "287:42:12",
              "statements": [
                {
                  "expression": {
                    "id": 2763,
                    "name": "approvedTeamsCount",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1143,
                    "src": "304:18:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 2762,
                  "id": 2764,
                  "nodeType": "Return",
                  "src": "297:25:12"
                }
              ]
            },
            "functionSelector": "b103b43a",
            "id": 2766,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getApprovedTeamsCount",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2759,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "252:2:12"
            },
            "returnParameters": {
              "id": 2762,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2761,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 2766,
                  "src": "278:7:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2760,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "278:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "277:9:12"
            },
            "scope": 2767,
            "src": "222:107:12",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 2768,
        "src": "116:216:12"
      }
    ],
    "src": "40:293:12"
  },
  "compiler": {
    "name": "solc",
    "version": "0.7.6+commit.7338295f.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.3.2",
  "updatedAt": "2021-01-22T04:14:17.096Z",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approveTeam(uint256)": {
        "details": "Should be overwritten on inherited contract to add modifier or require statements for access control.",
        "params": {
          "teamId": "{uint256} the ids of the teams to be approved"
        }
      },
      "closeRegistration()": {
        "details": "Should be overwritten on inherited contract to add modifier or require statements for access control."
      },
      "closeSubmission()": {
        "details": "Should be overwritten on inherited contract to add modifier or require statements for access control."
      },
      "getRegistrationStatus()": {
        "returns": {
          "_0": "{bool} returns {true} if enabled; otherwise, {false}."
        }
      },
      "getSubmissionStatus()": {
        "returns": {
          "_0": "{bool} returns {true} if enabled; otherwise, {false}."
        }
      },
      "getTeam(uint256)": {
        "params": {
          "teamId": "{uint256} the team's unique identifier returned on registration"
        },
        "returns": {
          "_0": "{bytes32} team's name",
          "_1": "{address} team's address",
          "_2": "{bytes32} team's proposal data",
          "_3": "{bool} team's status: {true} for approved; {false} for reproved;",
          "_4": "{uint256} team's grade"
        }
      },
      "getTeamByAddress(address)": {
        "params": {
          "teamAddress": "{address} the team's contract address used on registration"
        },
        "returns": {
          "_0": "{bytes32} team's name",
          "_1": "{address} team's address",
          "_2": "{bytes32} team's proposal data",
          "_3": "{bool} team's status: {true} for approved; {false} for reproved;",
          "_4": "{uint256} team's grade"
        }
      },
      "openRegistration()": {
        "details": "Should be overwritten on inherited contract to add modifier or require statements for access control."
      },
      "openSubmission()": {
        "details": "Should be overwritten on inherited contract to add modifier or require statements for access control."
      },
      "registerTeam(bytes32,address,bytes32)": {
        "details": "Registration process must be open.",
        "params": {
          "teamName": "{bytes32} team's proposal data; could be a hash for a file  on IPFS or for a github link; not required"
        }
      },
      "reproveTeam(uint256)": {
        "details": "Should be overwritten on inherited contract to add modifier or require statements for access control.",
        "params": {
          "teamId": "{uint256} the ids of the teams to be reproved"
        }
      },
      "reproveTeams(uint256[])": {
        "details": "Should be overwritten on inherited contract to add modifier or require statements for access control.",
        "params": {
          "teamIds": "{uint256[]} an array containing the ids of the teams to be reproved"
        }
      },
      "updateProposalData(uint256,bytes32)": {
        "params": {
          "proposalData": "the updated data for the team's proposal",
          "teamId": "team's unique identifier; required"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approveTeam(uint256)": {
        "notice": "(re)approves a team in participating in the contest"
      },
      "closeRegistration()": {
        "notice": "Closes the registration process"
      },
      "closeSubmission()": {
        "notice": "Closes the proposal submission process"
      },
      "getRegistrationStatus()": {
        "notice": "Gets the registration status"
      },
      "getSubmissionStatus()": {
        "notice": "Gets the submission status"
      },
      "getTeam(uint256)": {
        "notice": "Returns the stored information of a team"
      },
      "getTeamByAddress(address)": {
        "notice": "Returns the stored information of a team, based on a provided address"
      },
      "openRegistration()": {
        "notice": "Opens the registration process"
      },
      "openSubmission()": {
        "notice": "Opens the proposal submission process"
      },
      "registerTeam(bytes32,address,bytes32)": {
        "notice": "Registers a new team in the contest registry."
      },
      "reproveTeam(uint256)": {
        "notice": "reproves a team from participating in the contest"
      },
      "reproveTeams(uint256[])": {
        "notice": "reprove teams from participating in the contest"
      },
      "updateProposalData(uint256,bytes32)": {
        "notice": "Updates the proposal data for a specific team."
      }
    },
    "version": 1
  }
}
